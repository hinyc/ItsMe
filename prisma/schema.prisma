// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model User {
  id            Int      @id @default(autoincrement())
  sub           String   @unique
  name          String?
  nickname      String   @unique
  email         String   @unique
  image         String?
  phone         String?
  comment       String?
  personalUrl   String?  @unique
  isPremium     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  auth          UserAuth?
  links         UserLink[]
  photos        UserPhoto[]
  subscription  Subscription?
}

model UserAuth {
  userId       Int      @id @map("user_id")
  passwordHash String
  provider     AuthProvider
  lastLogin    DateTime?

  user         User     @relation(fields: [userId], references: [id])
}

enum AuthProvider {
  google
  kakao
  naver
  instagram
  apple
  github
}

enum LinkIcon {
  instagram
  facebook
  x
  linkedin
  github
  blog
  wechat
  tiktok
  thread
  youtube
  discord
  telegram
  pinterest
  reddit
  spotify
  behance
  dribbble
  medium
  twitch
  snapchat
  notion
  tistory
  naver
  heart
  star
  rocket
  lightbulb
  paw
  ghost
  dragon
  cat
  dog
}

model UserLink {
  id          Int      @id @default(autoincrement())
  userId      Int
  linkName    String
  url         String
  icon        LinkIcon
  iconVariant String   @default("line")
  effect      String?

  user        User     @relation(fields: [userId], references: [id])
}



model UserPhoto {
  id        Int      @id @default(autoincrement())
  userId    Int
  photoUrl  String
  uploadedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  userId    Int      @id @map("user_id")
  planType  PlanType
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus

  user      User     @relation(fields: [userId], references: [id])
}

enum PlanType {
  free
  basic
  premium
}

enum SubscriptionStatus {
  active
  canceled
  expired
}
